from pysc2.agents import base_agent
from pysc2.env import sc2_env
from pysc2.lib import actions, features, units
from absl import app
import random


class TerranAgent(base_agent.BaseAgent):

  def __init__(self):
    super(TerranAgent, self).__init__()
    self.attack_coordinates = None


  def unit_type_is_selected(self, obs, unit_type):

    if (len(obs.observation.single_select) > 0 and
            obs.observation.single_select[0].unit_type == unit_type):
        return True

    if (len(obs.observation.multi_select) > 0 and
            obs.observation.multi_select[0].unit_type == unit_type):
        return True

    return False

  def get_units_by_type(self, obs, unit_type):

    return [unit for unit in obs.observation.feature_units
            if unit.unit_type == unit_type]

  def can_do(self, obs, action):

    return action in obs.observation.available_actions

  def step(self, obs):
    super(TerranAgent, self).step(obs)

    if obs.first():
        player_y, player_x = (obs.observation.feature_minimap.player_relative ==
                               features.PlayerRelative.SELF).nonzero()

        xmean = player_x.mean()
        ymean = player_y.mean()
        print(" \n means\n ", xmean, ymean)
        if xmean <= 31 and ymean <= 31:
            self.attack_coordinates = [49,49]
        else:
            self.attack_coordinates = [12,16]

#Attack with the Marines
    reaper = self.get_units_by_type(obs, units.Terran.Reaper)
    if len(reaper) >= 3:
        if self.unit_type_is_selected(obs,units.Terran.Reaper):
            if self.can_do(obs, actions.FUNCTIONS.Attack_minimap.id):
                return actions.FUNCTIONS.Attack_minimap("now",self.attack_coordinates)
        if self.can_do(obs, actions.FUNCTIONS.select_army.id):
            return actions.FUNCTIONS.select_army("select")

#Attack with the Reaper
    marines = self.get_units_by_type(obs, units.Terran.Marine)
    if len(marines) >= 15:
        if self.unit_type_is_selected(obs,units.Terran.Marine):
            if self.can_do(obs, actions.FUNCTIONS.Attack_minimap.id):
                return actions.FUNCTIONS.Attack_minimap("now",self.attack_coordinates)
        if self.can_do(obs, actions.FUNCTIONS.select_army.id):
            return actions.FUNCTIONS.select_army("select")

#Gather Vespene NOT WORKING
    Refinery = self.get_units_by_type(obs, units.Terran.Refinery)
    SCV = self.get_units_by_type(obs, units.Terran.SCV)
    if len(Refinery) > 0:
        Refinery = random.choice(Refinery)
        if Refinery['assigned_harvesters'] < 3:
            SCV = random.choice(SCV)
            if self.unit_type_is_selected(obs,units.Terran.SCV) :
                if len(obs.observation.single_select) < 3 and len(obs.observation.multi_select) < 3 :
                    if self.can_do(obs,actions.FUNCTIONS.Harvest_Gather_screen.id):
                        return actions.FUNCTIONS.Harvest_Gather_screen("now",(Refinery.x, Refinery.y))

#Build Factory NOT WORKING
    Factory = self.get_units_by_type(obs, units.Terran.Factory)
    if len (Factory) < 1 :
        if self.unit_type_is_selected(obs,units.Terran.SCV):
            if self.can_do(obs,actions.FUNCTIONS.Build_Factory_screen.id):
                x = random.randint(0,63)
                y = random.randint(0,63)
                return actions.FUNCTIONS.Build_Factory_screen("now", (x,y))

#Build Barracks
    Barracks = self.get_units_by_type(obs, units.Terran.Barracks)
    if len (Barracks) < 1 :
        if self.unit_type_is_selected(obs,units.Terran.SCV):
            if self.can_do(obs,actions.FUNCTIONS.Build_Barracks_screen.id):
                x = random.randint(0,63)
                y = random.randint(0,63)
                return actions.FUNCTIONS.Build_Barracks_screen("now", (x,y))

#Train Marines
    Marines = self.get_units_by_type(obs, units.Terran.Marine)
    if len (Barracks) > 0 and len(Marines) < 12:
        if self.unit_type_is_selected(obs,units.Terran.Barracks):
            if self.can_do(obs, actions.FUNCTIONS.Train_Marine_quick.id) :
                return actions.FUNCTIONS.Train_Marine_quick("now")

#Train Reaper
    Reaper = self.get_units_by_type(obs, units.Terran.Reaper)
    if len(Barracks) > 0  and len(Reaper) < 5:
        if self.unit_type_is_selected(obs, units.Terran.Barracks):
            if self.can_do(obs, actions.FUNCTIONS.Train_Reaper_quick.id) :
                return actions.FUNCTIONS.Train_Reaper_quick("now")


#Build TechLab NOT WORKING
    TechLab = self.get_units_by_type(obs, units.Terran.BarracksTechLab)
    if len (TechLab) < 1 :
        if self.unit_type_is_selected(obs,units.Terran.Barracks):
            if self.can_do(obs,actions.FUNCTIONS.Build_TechLab_Barracks_screen.id):
                B = random.choice(Barracks)
                return actions.FUNCTIONS.Build_TechLab_Barracks_quick("now",(B.x, B.y))

#Train Marauder
    if len (Barracks) > 0 :
        if self.unit_type_is_selected(obs,units.Terran.Barracks):
            if self.can_do(obs, actions.FUNCTIONS.Train_Marauder_quick.id) :
                return actions.FUNCTIONS.Train_Marauder_quick("now")

#Build Refinery
    Refinery = self.get_units_by_type(obs, units.Terran.Refinery)
    if len(Refinery) < 2 :
        if self.unit_type_is_selected(obs,units.Terran.SCV) :
            if self.can_do(obs,actions.FUNCTIONS.Build_Refinery_screen.id) :
                geysers = self.get_units_by_type(obs,units.Neutral.VespeneGeyser)
                if len(geysers) > 0 :
                    geyser = random.choice(geysers)
                    return actions.FUNCTIONS.Build_Refinery_screen("now", (geyser.x, geyser.y))

#Build Supply Depot
    SupplyDepot = self.get_units_by_type(obs, units.Terran.SupplyDepot)
    if len (SupplyDepot) < 2 :
        if self.unit_type_is_selected(obs,units.Terran.SCV):
            if self.can_do(obs,actions.FUNCTIONS.Build_SupplyDepot_screen.id):
                x = random.randint(0,63)
                y = random.randint(0,63)
                return actions.FUNCTIONS.Build_SupplyDepot_screen("now", (x,y))

#Select Barracks
    Barracks = self.get_units_by_type(obs,units.Terran.Barracks)
    if len(Barracks) > 0 :
        Barracks = random.choice(Barracks)
        return actions.FUNCTIONS.select_point("select_all_type",(Barracks.x, Barracks.y))

#Select SCV
    SCV = self.get_units_by_type(obs, units.Terran.SCV)
    if len(SCV) > 0 :
        SCV = random.choice(SCV)
        return actions.FUNCTIONS.select_point("select_all_type", (SCV.x, SCV.y))

    return actions.FUNCTIONS.no_op()

def main(unused_argv):
  agent = TerranAgent()
  try:
    while True:
      with sc2_env.SC2Env(
          map_name="Simple64",
          players=[sc2_env.Agent(sc2_env.Race.terran),
                   sc2_env.Bot(sc2_env.Race.random,
                               sc2_env.Difficulty.medium)],
          agent_interface_format=features.AgentInterfaceFormat(
              feature_dimensions=features.Dimensions(screen=84, minimap=64),
              use_feature_units=True),
          step_mul=16,
          game_steps_per_episode=0,
          visualize=True) as env:

        agent.setup(env.observation_spec(), env.action_spec())

        timesteps = env.reset()
        agent.reset()

        while True:
          step_actions = [agent.step(timesteps[0])]
          if timesteps[0].last():
            break
          timesteps = env.step(step_actions)

  except KeyboardInterrupt:
    pass

if __name__ == "__main__":
    app.run(main)
